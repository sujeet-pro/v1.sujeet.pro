---
import Analytics from "./common/analytics.astro";
import Article from "./common/article.astro";
import Footer from "./common/footer.astro";
import Header from "./common/header.astro";
import PageIcons from "./common/page-icons.astro";
import Seo, { Props as SeoProps } from "./common/seo.astro";
import ThemeSetter from "./common/theme-setter.astro";
import {
  maxWidthContainer,
  siteColorBgDarkMode,
  siteColorBgLightMode,
  siteColorTextDarkMode,
  siteColorTextLightMode,
} from "../constants/classnames";
export type Props = SeoProps & {
  class?: string | undefined | null;
  article: boolean | { prose: boolean };
  noIndex?: boolean | undefined | null;
  maxWithContainerClassName?: string | null | undefined;
};
const {
  class: className,
  article,
  noIndex,
  maxWithContainerClassName = maxWidthContainer,
  ...seoProps
} = Astro.props as Props;
const canonicalUrl = Astro.site?.origin + Astro.url.pathname;

let assetPrefix = ""
if (import.meta.env.BASE_URL !== "/") {
  assetPrefix = import.meta.env.BASE_URL
}
---

<html lang="en-IN">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    {noIndex ? <meta name="robots" content="noindex" /> : null}
    <PageIcons assetPrefix={assetPrefix} />
    <link rel="manifest" href="/assets/favicons/manifest.json" />
    <meta name="msapplication-TileImage" content="/ms-icon-144x144.png" />
    <meta name="msapplication-TileColor" content="#e4e7eb" />
    <meta name="theme-color" content="#e4e7eb" />
    <link rel="sitemap" href={`${assetPrefix}/sitemap-index.xml`} />
    <link rel="canonical" href={canonicalUrl} />
    <Seo {...seoProps} />
    <ThemeSetter />
  </head>
  <body
    class:list={[
      "min-h-screen overflow-x-hidden flex flex-col",
      siteColorBgDarkMode,
      siteColorBgLightMode,
      siteColorTextDarkMode,
      siteColorTextLightMode,
    ]}
  >
    <Header />
    <div class:list={["flex-auto py-4", maxWithContainerClassName]}>
      <main class:list={[!article ? className : null]}>
        {
          article ? (
            <>
              <slot name="pre-article" />
              <Article
                prose={typeof article === "boolean" ? true : article.prose}
                class:list={[className]}
              >
                <slot />
              </Article>
              <slot name="post-article" />
            </>
          ) : (
            <slot />
          )
        }
      </main>
    </div>
    <Footer />
    <Analytics />
  </body>
</html>
