---
import type { ImageMetadata } from "astro";
import sujeetImage from "../../assets/sujeet-min.jpg";
import { SITE_BASE, AUTHOR_NAME } from "../../constants/global";
type ArticlePageType = {
  type: "article";
  tags: string[] | null;
  publishedDate: Date | null;
  updatedDate: Date | null;
};
type SitePageType = {
  type: "site";
};

export type Props = {
  title: string;
  description: string;
  image?:
    | ImageMetadata
    | (Omit<ImageMetadata, "format"> & { format: string })
    | string
    | undefined
    | null;
  pageDetails: SitePageType | ArticlePageType;
};

const { title, description, image, pageDetails } = Astro.props as Props;

const imageSrc = typeof image === "string" ? image : image?.src;
const url = SITE_BASE + Astro.url.pathname;
---

<title>{title}</title>
<meta property="og:title" content={title} />
<meta property="og:url" content={url} />
<meta property="og:locale" content="en-IN" />
<meta name="description" content={description} />
<meta property="og:description" content={description} />
<meta property="og:image" content={imageSrc || sujeetImage.src} />
{
  pageDetails.type === "article" ? (
    <>
      <meta property="og:type" content="article" />
      <meta property="og:article:author" content={AUTHOR_NAME} />
    </>
  ) : (
    <meta property="og:type" content="website" />
  )
}
{
  ((pageDetails.type === "article" && pageDetails.tags) || []).map((tag) => (
    <meta property="og:article:tag" content={tag} />
  ))
}
{
  pageDetails.type === "article" && pageDetails.publishedDate ? (
    <meta
      property="og:article:published_time"
      content={pageDetails.publishedDate.toISOString()}
    />
  ) : null
}
{
  pageDetails.type === "article" && pageDetails.updatedDate ? (
    <meta
      property="og:article:modified_time"
      content={pageDetails.updatedDate.toISOString()}
    />
  ) : null
}

<meta name="twitter:card" content="summary" />
<meta name="twitter:creator" content="@sujeetpro" />
